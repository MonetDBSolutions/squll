# (c) 2019- SQALPEL
# author: Martin Kersten
# A sample squll.py configuration file
# This file should live within the directory from which you start the program
# or designated with a path on the command line.

[DEFAULT]
# The default section contains the properties shared for all target systems.

# The main property is the IP adress to reach a SQALPEL web server
server = localhost:5000
# server = http://scalpel-14242567.eu-west-1.elb.amazonaws.com/

# The prime purpose of squll.py is to run database experiments on behalf of registered SQALPEL users.
# It can retrieve tasks by providing a project specific task key.
# The global key is used for debugging.
ticket=aBcDeFgH

# SQALPEL differentiates the platforms on which experiments are ran with a host nickname.
# This way one can conceal the actual internal host name, releasing only basic platform properties.

# Long running experiments can be costly, espcially in a Cloud setting.
# Therefore, when the DBMS has an option to timeout a query, it can use this
# global time out property (in seconds)
timeout = 60

# For debugging purposes of sqalpel.py one can turn on this flag
debug = true

# The program stops when it runs out of work. This can be avoided using the property 'forever'
forever= true

# After too many database errors it bails out to assess the experimental setup.
# A value 0 means never to bail out, otherwise it is the number of errors allowed
bailout = 0

# All experiments are ran a number of times, because the first
# run typically warms up the database engine.
# It is a parameter that can be overloaded within a request
repeat = 5

# TASK SPECIFICATION
# The sections are specific to the platform on which it runs.
# It specifies the parameters needed for the database, dbms, or host.
# Upon need additional key=value pairs can be given to instruct the corresponding driver
# IMPORTANT - For JDBC connections, the JAVA_HOME environmental variable should be set!

[MonetDB]
ticket =aBcDeFgH
dbfarm = %{home}s/dbfarm

[SQLite]
dbfarm = %(home)s/sqlite/

[PostgreSQL]
dbfarm = %(home)s/data

[MariaDB]
dbfarm =%(home)s/dbfarm-mariadb
dbsocket=%(home)s/.mariadb.socket
command=mysql --socket={socket} --database={database} -u root
port=51337

[Actian]
command=sql {database}

[Firebird]
dbfarm = #%(home)s/firebird/database.db


[Apache Derby]
dbfarm = /path/to/sf1
uri = jdbc:derby:{database};create=true;
jars = </path/to/>derby.jar

[Apache Hive]
uri = jdbc:hive://localhost:10000/{database}
jars = </path/to>/hive.jar

[H2]
dbfarm = </path/to/sf1>/path/to/sf10
uri = jdbc:h2:{database}
jars = /path/to/h2.jar

[HSQLDB]
project = TPC_H
db = </path/to/sf1>/path/to/sf10
dbms = HSQLDB
experiment = q06,q01
version = 2.4.1
uri = jdbc:hsqldb:file:{database}
jars = /path/to/hsqldb.jar

[MonetDBLite-Java]
db = </path/to/sf1>/path/to/sf10
uri = jdbc:monetdb:embedded:{database}
jars = /path/to/monetdb-jdbc-new.jar,/path/to/monetdb-java-lite.jar
